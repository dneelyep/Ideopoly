import junit.framework.TestCase;
import java.awt.*;
/**
 * A JUnit test case class.
 * Every method starting with the word "test" will be called when running
 * the test with JUnit.
 */

/**
 * IdeopolyTester - various test cases to make sure the game works as intended.
 */
public class IdeopolyTester extends TestCase {
    // TODO: Add all test cases (and more!) from my notes.
    //    System.out.println("Hello."); // TODO: This is just here to remove make docs warnings.


    // LEFTOFFHERE: Before I go any further in the code, implementing tests for each function in the game.

    /** NOTE: This is just an example stub I can use.Test complement */
    public void testComplement() {
	// TODO: add tests for:
	//
	// BoardCell.java

	// /** Creates a BoardCell object, with the specified name, image, and coordinates.
	//  *  Does not have an owner. There are no players standing on this object. */
	// public BoardCell(String new_name, Icon new_image, int x_pos, int y_pos, String edge) {
	//     name	    = new_name;
	//     ownedBy     = null;
	//     image	    = new_image;
	//     cellX	    = x_pos;
	//     cellY       = y_pos;
	//     orientation = edge;
	// }

	// /** Get the name of this property. */
	// public String getName() {
	//     return name;
	// }

	// /** Get the owner of this property. */
	// public Player getOwner() {
	//     return ownedBy;
	// }

	// /** Make player p the owner of this property. */
	// public void setOwner(Player p) {
	//     ownedBy = p;
	//     if (p == player1) {
	// 	// TODO: Change image here. And below.
	//     }
	//     else if (p == player2) {
	//     }
	//     else if (p == player3) {
	//     }
	//     else if (p == player4) {
	//     }
	// }

	// /** Get the image associated with this property. */
	// public Icon getImage() {
	//     return image;
	// }

	// public void setImage(Icon new_image) {
	//     image = new_image;
	// }

	// /** Get player 1 if standing on cell. */
	// public Player getPlayer1() {
	//     return player1;
	// }

	// /** Get player 2 if standing on cell. */
	// public Player getPlayer2() {
	//     return player2;
	// }

	// /** Get player 3 if standing on cell. */
	// public Player getPlayer3() {
	//     return player3;
	// }

	// /** Get player 4 if standing on cell. */
	// public Player getPlayer4() {
	//     return player4;
	// }

	// /** Get this cell's x position. */
	// public int getX() {
	//     return cellX;
	// }

	// /** Get this cell's y position. */
	// public int getY() {
	//     return cellY;
	// }

	// /** Get this cell's orientation on the board. */
	// public String getOrientation() {
	//     return orientation;
	// }

	// /** Get the width of this cell. */
	// public int getWidth() {
	//     return width;
	// }
	// /** Get the height of this cell.*/
	// public int getHeight() {
	//     return height;
	// }

	// /** Dummy method. Used so I can access getRent() from the derived class PropagandaOutlet. */
	// public int getRent() {
	//     return 0;
	// }

	// public int getCost() {
	//     return 0;
	// }


	// ================
	// IdeopolyGUI.java
	// ================

	// ==================
	// BoardPosition.java
	// ==================

	// ===================
	// IdeopolyTester.java
	// ===================

	// =============
	// CashCell.java
	// =============

	// =========
	// Menu.java
	// =========

	// ===========
	// Chance.java
	// ===========

	// ===========
	// Player.java
	// ===========

	// ====================
	// CharacterSelect.java
	// ====================

	// =====================
	// PropagandaOutlet.java
	// =====================

	// ===================
	// CommunityChest.java
	// ===================

	// ==============
	// Railroad.java
	// ==============


	assertEquals(1, 1);
    }












    /*
Check that every single cell in the board is initialized, with the correct values etc. IE for a property, that all rent values are correct.

Make sure that a person who passes go and lands on the community chest that then passes them back to go is payed twice accordingly.

Make sure that the user gets moved to the correct space when they move pass go.

Have a player mortgage a property. After they mortgage it, make sure it's removed from their list of owned properties and their number of owned properties is decremented. Also, that property should no longer have an associated owner. Make sure also that this works for each type of property. IE for regular tile, school, elec. company, water works.

Have a player land on chance and community chest. Both times, make sure the top item was taken off the stack, that the second to top item was moved to the top, and that the top item gets put back on the bottom.

Have a player use their get out of jail free card. Make sure the card's returned to the bottom of the stack of either community chest or chance accordingly.

Include tests to make sure this works for community chest and chance.
Have the player land on Income tax. Test cases where the user decides to pay $200, or when they choose to pay 10%.

Have the player land on go to jail. Make sure they're not given $200. Make sure their currently in jail value is set to the correct number of weeks.

Have the player roll doubles in jail. Make sure their current space gets set properly, and that their currently in jail value is not true

Make sure a person in jail can still buy and sell property, houses, hotels, and collect rents.

Make sure a person in the last week of jail who doesn't roll doubles is charged $50.

Make sure a person attempting to buy houses has all houses in a color group. Make sure this works for all color groups.

Make sure the person distributes houses evenly, putting them on unimproved properties owned before improved properties.

Make sure a person can't add more than 4 houses to a property.

Make sure a person can't do eg 1 house on 2 properties in a group and then 3 houses in another property.

Make sure that a person can only buy a hotel if they have each property in a color group, and each of those properties holds 4 houses.

Make sure multiple hotels can't be erected on a property.

Make sure the player can't mortgage an unsellable property (IE Go, free parking, jail, etc.) Check this for all relevant properties.

Check to make sure the mortgage process works correctly. Correct amount of money lost by the player, property's owner is removed, etc.

Make sure a bankrupt person gets removed from the game

Make sure a bankrupt person by the bank loses all their assets properly

Make sure a bankrupt person by another player transfers assets properly. And make sure the receiving player pays tax on the items received. */
}